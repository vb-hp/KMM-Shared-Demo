buildscript {
    apply from: "versions.gradle"
    repositories {
        mavenCentral()
        google()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlinVersion"
        classpath "com.android.tools.build:gradle:$gradleVersion"
    }
}

plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.72'
    id 'digital.wup.android-maven-publish' version '3.6.3'
    id 'org.jetbrains.kotlin.native.cocoapods' version '1.3.72'
    id "org.jetbrains.kotlin.plugin.serialization" version '1.3.72'
}

apply plugin: 'com.android.library'
apply plugin: "org.jetbrains.kotlin.plugin.serialization"

repositories {
    maven { url("https://dl.bintray.com/korlibs/korlibs") }
    jcenter()
    mavenCentral()
    google()
    maven { setUrl("https://dl.bintray.com/kotlin/kotlin-eap") }
    maven { url "https://jitpack.io" }
    maven { url = "https://dl.bintray.com/icerockdev/moko" }
}

android {
    compileSdkVersion targetSdk
    buildToolsVersion buildTools
    defaultConfig {
        minSdkVersion minSdk
        targetSdkVersion targetSdk
        versionCode libVersionCode
        versionName libVersionName
    }

    buildTypes {
        debug {
            debuggable true
        }
        release {
            minifyEnabled false
        }
    }

    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    packagingOptions {
        exclude 'META-INF/*.kotlin_module'
    }

    sourceSets {
        main {
            manifest.srcFile 'src/androidMain/AndroidManifest.xml'
            java.srcDirs = ['src/androidMain/kotlin']
            res.srcDirs = ['src/androidMain/res']
        }
    }
}

kotlin {
    targets {
        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") ? presets.iosArm64 : presets.iosX64


        fromPreset(iOSTarget, 'ios') {
            binaries {
                framework('shared')
                compilations.each {
                    compilations.forEach {
                        it.kotlinOptions {
                         //   freeCompilerArgs = freeCompilerArgs + "-Xobjc-generics" + "-linker-options" + "-lsqlite3"
                        }
                    }
                }
            }
        }


        fromPreset(presets.android, 'android')
    }

    sourceSets {

        commonMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'

                // mvvm
                implementation "dev.icerock.moko:mvvm:$mvvmVersion"

                //coroutines Common
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines"

                //Ktor: Networking
                implementation "io.ktor:ktor-client-core:$ktor_version"
                //serialization
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization"
            }
        }

        androidMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib'

                //coroutines Android
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines"

                // KTOR
                implementation "io.ktor:ktor-client-android:$ktor_version"

                //serialization
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization"
            }
        }

        iosMain {
            dependencies {
                //coroutines
                implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$coroutines")

                // KTOR
                implementation "io.ktor:ktor-client-ios:$ktor_version"

                //serialization
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serialization"
            }
        }

        androidTest {
            dependencies {
                implementation(kotlin("test-junit"))
            }
        }

        jvmTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
            }
        }
    }
}

configurations {
    compileClasspath
}

// pod plugin
kotlin {
    cocoapods {
        // Configure fields required by CocoaPods.
        summary = "KMM Demo Shared"
        homepage = "www.philips.com"
        license = "Copyright (c) Koninklijke Philips N.V., 2010."

    }
}

//aar plugin
group 'com.sample.kmm.demo'
version = "0.0.1"
publishing {
    publications {
        kmmShared(MavenPublication) {
            from components.android
        }
    }
}